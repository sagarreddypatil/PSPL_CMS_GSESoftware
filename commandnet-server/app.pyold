from flask import Flask, jsonify
import os
import time
from cryptography.hazmat.primitives.ciphers.aead import AESCCM

# transfer str into bytes (so brandon does not have to search it up again): str.encode("UTF-8")
def createNonce():
    return(os.urandom(10))
def getTime():
    return str(int(time.time()))
def createAESAuthKey():
    return AESCCM.generate_key(bit_length=256)  

def encryptdata(pwd, nonce, key, data):
    aad = pwd.encode("UTF-8")
    aesccm = AESCCM(key)
    ct = aesccm.encrypt(nonce, data.encode("UTF-8"), aad)
    return(ct)

#idk why i wrote a decryption but here it is !!!!!

def decryptdata(pwd, nonce, key, ct):
    aad = pwd.encode("UTF-8")
    aesccm = AESCCM(key)
    return(aesccm.decrypt(nonce, ct, aad).decode("UTF-8"))

app = Flask(__name__)

if __name__ == "__main__":
    #context = ('local.crt', 'local.key')
    app.run(host='127.0.0.1', port=5000, debug=True, ssl_context="adhoc")

@app.route("/hello")
def hello_world():
    return "Hello, World!"
@app.route('/hello/<name>')
def hello(name=None):
    return f"<p>Hello, {name}!</p>"
@app.route("/nonce-test")
def test_urandom():  # i can confirm it is random :))
    nonce = createNonce()
    return f"<p>{nonce}<p>"

@app.route("/register")
def register():
    pass
    return("<p>registered key<p>")

@app.route("/config/<name>/<value>")
def send_config(name, value):
    pass
    return("<p>send config/calibrations<p>")

@app.route("/confirmation<name>/<value>")
def send_confirmation(name, value):
    pass
    return("<p>send launch confirmations<p>")

@app.route("/hold")
def hold_countdown():
    pass
    return("<p>hold the launch countdown<p>")

@app.route("/continue")
def continue_countdown():
    pass
    return("<p>stop holding and continue the launch countdown<p>")


